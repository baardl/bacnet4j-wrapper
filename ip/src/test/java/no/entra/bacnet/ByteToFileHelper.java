package no.entra.bacnet;

import org.slf4j.Logger;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;

import static com.serotonin.bacnet4j.npdu.ip.IpNetwork.MESSAGE_LENGTH;
import static org.slf4j.LoggerFactory.getLogger;

public class ByteToFileHelper {
    private static final Logger log = getLogger(ByteToFileHelper.class);

    private static final String BACNET_HEX = "81 0a 00 11 01 04 02 75 00 0c 0c 02 00 04 4e 19 61";
    //BVLCI
    public static final String BACNET_IP = "81";
    public static final String FUNCTION_UNICAST_NPDU = "0a";
    public static final String LENGTH = "0011"; //17
    public static final String LENGTH_2048 = "0800";
    //NPCI
    public static final String VERSION = "01";
    public static final String CONTROL = "04";

    public static void main(String[] args) throws IOException {
        String fileName = "C:\\Users\\gp694\\examples\\bacnet\\bacnet4j-wrapper\\hjemmefra";

        String hexString = BACNET_HEX.replace( " ", "");
        hexString = BACNET_IP + FUNCTION_UNICAST_NPDU + LENGTH_2048 + VERSION + CONTROL + "0275000c0c0200044e1961";
        hexString = fillSize(hexString, MESSAGE_LENGTH);
        hexString = "810a080001040275350c0c020007d1194c4e7515004241436e6574344a2064657669636520313233344f29624e21014f29464e7509004241436e6574344a4f29a74e247fffffff4f1f
        writeHexStringToFile(hexString, fileName);
        log.info("hexString: Size: {}: {}", hexString.length(), hexString);
        /*
         byte[] readBytes = readFirstBytesFromFile(MESSAGE_LENGTH, fileName);
        String hexString = bytesToHex(readBytes);
        log.info("hexString: Size: {}: {}", hexString.length(), hexString);
         */


    }

    private static String fillSize(String hexString, int messageLength) {
        String fullHexString = hexString;
        if (hexString.length() <= messageLength) {
            String empty = "00";
            do {
                fullHexString += empty;
            } while (fullHexString.length() < messageLength -6 );
        }
        fullHexString += "efbfbd";
        return fullHexString;
    }

    public static void writeHexStringToFile(String hexString, String fileName) throws IOException {
        OutputStream os = new FileOutputStream(fileName);
        byte[] value = hexStringToByteArray(hexString);
        os.write(value);
        os.close();
    }

    public static byte[] hexStringToByteArray(String s) {
        int len = s.length();
        byte[] data = new byte[len / 2];
        for (int i = 0; i < len; i += 2) {
            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
                    + Character.digit(s.charAt(i+1), 16));
        }
        return data;
    }
    public static String bytesToHex(byte[] hashInBytes) {

        StringBuilder sb = new StringBuilder();
        for (byte b : hashInBytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();

    }

    public static byte[] readFromFile(String filename) throws IOException {
        byte[] content = Files.readAllBytes(Paths.get(filename));
        return content;
    }

    public static byte[] readFirstBytesFromFile(int length, String filename) throws IOException {
        byte[] buffer = new byte[length];
        InputStream is = new FileInputStream(filename);
        if (is.read(buffer) != buffer.length) {
            // do something
        }
        is.close();
        return buffer;
    }
}
